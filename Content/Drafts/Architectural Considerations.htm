<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>What Is Graylog?</h1>
        <p style="text-align: justify;">Graylog is a powerful Security Information and Event Management (SIEM) solution, that provides a log analytics platform that helps you quickly and easily collect, search, analyze, and alert on all types of machine-generated data. It is designed to capture data from various sources and provide users with an efficient way to centralize, secure, and monitor their log data.</p>
        <p style="text-align: justify;">Graylog's architecture consists of three main components (Graylog stack) –  Graylog, OpenSearch, and MongoDB. These components when stacked, allow users to perform a myriad of cybersecurity-related functions such as:</p>
        <p style="text-align: justify;">·&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Data aggregation</p>
        <p style="text-align: justify;">·&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Security data analytics (reports and dashboards)</p>
        <p style="text-align: justify;">·&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Correlation and security event monitoring</p>
        <p style="text-align: justify;">·&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Forensic analysis</p>
        <p style="text-align: justify;">·&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Incident detection and response</p>
        <p style="text-align: justify;">·&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Real-time event response or alerting console</p>
        <p style="text-align: justify;">·&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Threat intelligence</p>
        <p style="text-align: justify;">·&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; User and entity behavior analytics (UEBA)</p>
        <p style="text-align: justify;">·&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; IT compliance management</p>
        <p style="text-align: justify;">To help optimize your logging experience, it is important to understand the architecture of Graylog, the components that make up the platform, and how they interact with each other. In essence, what are the architectural considerations to factor in as you configure Graylog, to ensure that the system performs optimally?</p>
        <p style="text-align: justify;">As Graylog is composed of open-source components, users should consider the compatibility of the components and the environment in which the system will be deployed. The considerations involve determining the hardware requirements, the number of nodes comprising the Graylog system, the data flow, and the logging process. Additionally, consideration should be given to the scalability,  security, performance, and availability of the system.</p>
        <p style="text-align: justify;">When selecting hardware for a Graylog installation, the first consideration is the number of sources to be monitored. Depending on the number of hosts, nodes, and services being monitored, the amount of RAM, disk space, and CPU cores are also important.</p>
        <p style="text-align: justify;">Careful consideration of these factors by users will ensure that Graylog is set up properly and can be scaled appropriately if needed.</p>
        <p style="text-align: justify;">This article highlights the different components of Graylog’s Log Management solution architecture and provides users with concise, definitive recommendations on how to design a Graylog cluster and best practices for deploying a secure and efficient logging infrastructure. <a href="https://www.graylog.org/post/considerations-for-centralized-logging-architectures/">Log Management Architecture </a></p>
        <p style="text-align: justify;">In providing these recommendations, we have considered factors such as scalability, storage capacity, network throughput, clustering options, security needs, system reliability, and other architecture-related factors.</p>
        <h1>Graylog Core Features</h1>
        <p>There are many features that enhance Graylog’s usefulness as a flexible tool:</p>
        <ul>
            <li>
                <p><a href="https://go2docs.graylog.org/5-0/making_sense_of_your_log_data/streams.html">Streams</a> operate as a form of tagging for incoming messages. Streams route messages into categories in real-time, and steam rules instruct Graylog to route messages into the appropriate stream.</p>
                <p>Streams are used to route data for storage into an index. They are also used to control data access and route messages for parsing, enrichment, and other modification. Streams then determine which messages to archive.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>The Graylog <a href="https://go2docs.graylog.org/5-0/making_sense_of_your_log_data/how_to_search_your_log_data.html?Highlight=search%20">Search</a> page is the interface used to search logs directly. Graylog uses a simplified syntax, very similar to Lucene. Relative or absolute time ranges are configurable from drop down menus. Searches may be saved or visualized as dashboard widgets that may be added directly to dashboards from within the search screen.</p>
                <p>Users may configure their own views and may choose to see either a summary or complete data from event messages.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>Graylog <a href="">Dashboards</a> are visualizations or summaries of information contained in log events. Each dashboard is populated by one or more widgets. Widgets visualize or summarize event log data with data derived from field values such as counts, averages, or totals. Users can create indicators, charts, graphs, and maps to visualize the data.</p>
                <p>Dashboard widgets and dashboard layouts are configurable. Graylog's role-based access controls dashboard access. Users can import and export dashboards via content packs.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p><a href="https://go2docs.graylog.org/5-0/interacting_with_your_log_data/alerts_and_notifications.html">Alerts</a> are created using Event Definitions that consist of Conditions. When a given condition is met it will be stored as an Event and can be used to trigger a notification.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p><a href="https://go2docs.graylog.org/5-0/what_more_can_graylog_do_for_me/content_packs.html?Highlight=content%20packs">Content packs</a> accelerate the set-up process for a specific data source. A content pack can include inputs/extractors, streams, dashboards, alerts, and pipeline processors. For example, users can create custom inputs, streams, dashboards, and alerts to support a security use case. Users can then export the content pack and import it on a newly installed Graylog instance to save configuration time and effort.</p>
                <p>Users may download content packs which are created, shared and supported by other users via the <a href="https://go2docs.graylog.org/5-0/what_more_can_graylog_do_for_me/graylog_marketplace.html">Graylog Marketplace</a>.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>An <a href="https://go2docs.graylog.org/5-0/setting_up_graylog/index_model.html">Index</a> is the basic unit of storage for data in OpenSearch/Elasticsearch. Index sets provide configuration for retention, sharding, and replication of the stored data. Values, like retention and rotation strategy, are set on a per-index basis, so different data may be subjected to different handling rules.</p>
            </li>
            <li>
                <p><a href="https://go2docs.graylog.org/5-0/getting_in_log_data/graylog_sidecar.html">Graylog Sidecar</a> is an agent to manage fleets of log shippers, like Beats or NXLog. These log shippers are used to collect OS logs from Linux and Windows servers. Log shippers read logs written locally to a flat file, and then send them to a centralized log management solution. Graylog supports management of any log shipper as a backend.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>Graylog’s <a href="https://go2docs.graylog.org/5-0/making_sense_of_your_log_data/pipelines.html">Processing Pipelines</a> enable the user to run a rule, or a series of rules, against a specific type of event. Tied to streams, pipelines allow routing, denylisting, modification, and enrichment of messages as they flow through Graylog.</p>
            </li>
        </ul>
        <h1>Graylog Architecture</h1>
        <h2>Introduction: The Basics</h2>
        <p>Let’s start with the basics about the Graylog stack, what this comprises and how it all works together.<br /></p>
        <p>Graylog provides a comprehensive and powerful platform for collecting, indexing, and analyzing logs from servers, services, applications, and devices. Graylog is based on a three-tier architecture consisting of a web interface, a data processing and storage environment, and an OpenSearch/Elasticsearch cluster.<br /></p>
        <p><b>Graylog + Data Node + MongoDB</b>
            <br />
        </p>
        <ul>
            <li>
                <p>The Graylog stack consists of three open-source services used together: Graylog, MongoDB, and OpenSearch (or Elasticsearch for versions of Graylog older than 4.3.X).</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>MongoDB, OpenSearch/Elasticsearch are databases to which Graylog sends API requests. MongoDB and OpenSearch/Elasticsearch do not send API requests to Graylog or communicate with each other.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>Graylog stores information about its run state and any data it ingests within these two databases. The Graylog service itself requires storage only for its buffers and journal, which temporarily hold log messages while these are processed.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>MongoDB is used to hold metadata and configuration data, like the names of streams and Indexes. It needs very little in the way of system resources or storage. If MongoDB is down, Graylog can continue to run. So, it is your choice whether or not to include it in a high-availability design. Mongo recommends three instances for a high-availability setup. This is because if one MDB instance goes down, then MDB has to recommend a primary, and without two more other instances, it can get confused between the first two.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>OpenSearch is used to hold ingested log data, and because it is typically receiving both read and write requests constantly, it requires both significant system resources and storage.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>Graylog suggests that one instance of MongoDB service may share a server with one instance of the Graylog service. This is commonly referred to as a Graylog node.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>Graylog suggests one instance of OpenSearch only and should not share a server with either MongoDB or Graylog. This is commonly referred to as an OpenSearch node.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>Graylog suggests that the minimum setup therefore consists of one Graylog Node and one OpenSearch Node.</p>
            </li>
        </ul>
        <p>In summary:</p>
        <p style="text-align: justify;"><b>Graylog Web Interface</b> enables deep exploration of your collected logs through advanced queries and configuration settings. With easy to string query syntaxes, you're able to dig into multiple events at once, group them by certain criteria, chart results over time or categorize them according to type – giving you direct insight into trends while uncovering potential issues before they can become costly downtimes later.</p>
        <p style="text-align: justify;">
            <br />
        </p>
        <p style="text-align: justify;"><b>OpenSearch/Elasticsearch</b> is responsible for receiving and indexing all log messages that are sent to Graylog by various logging sources. It also allows users to search through the logs using built-in search operators such as wildcards, regular expressions, and fuzzy matching. Additionally, it provides support for distributed indexing and backup/restore of indices which can be used in disaster recovery scenarios.</p>
        <p style="text-align: justify;">&#160;</p>
        <p style="text-align: justify;"><b>MongoDB</b> is responsible for storing the configuration data associated with Graylog. It provides high availability, scalability, and data durability which makes it a good choice for managing configurations. Additionally, MongoDB can be used to store additional meta-data related to log messaging such as user information or environment details.</p>
        <h1>Planning your Deployment</h1>
        <h3 class="title">Clustering options &amp; design</h3>
        <p style="text-align: justify;">When deploying Graylog, careful consideration should be given to the architectural factors that optimize system performance and scalability. It is crucial to plan ahead, taking into account system requirements such as the number of concurrent users, data storage needs, and system scalability. Security requirements, including user authentication and authorization, as well as data encryption, should also be taken into consideration. Additionally, the architecture should incorporate fault tolerance, high availability, and load balancing capabilities. The core components of Graylog's architecture consist of message inputs, message processing pipelines, message output, and message storage. Each of these components should be fine-tuned for optimal performance and scalability, ensuring the system can handle high volumes of data ingestion.</p>
    </body>
</html>